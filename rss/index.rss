<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>4ox log</title><description>개발에 관한 기록 - 나에게 하는 강의</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Sun, 07 Jun 2015 12:10:12 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>CentOS 7.0 hostname 변경</title><description>&lt;p&gt;CentOS 7 이전 버전에서는 /etc/sysconfig/network 파일에 HOSTNAME 을 정의하면 되었는데 &lt;br&gt;
CentOS 7 부터는 데비안 계열처럼 /etc/hostname 이라는 파일을 사용하도록 변경되었습니다.&lt;/p&gt;

&lt;p&gt;/etc/sysconfig/network 파일은 보통 아래와 같이 설정을 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;NETWORKING=yes  
NETWORKING_IPV6=no  
HOSTNAME=centos70  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bash
CentOS 7 에서는 이렇게만 하면 hostname 이 변경이 안 되고&lt;/p&gt;</description><link>http://localhost:2368/change_hostname_on_centos7/</link><guid isPermaLink="false">59a66a34-a956-4e4d-a7f9-cb97e151a5e6</guid><category>CentOS 7.0</category><category>OS</category><category>Linux</category><dc:creator>4ox</dc:creator><pubDate>Sun, 07 Jun 2015 06:02:00 GMT</pubDate><content:encoded>&lt;p&gt;CentOS 7 이전 버전에서는 /etc/sysconfig/network 파일에 HOSTNAME 을 정의하면 되었는데 &lt;br&gt;
CentOS 7 부터는 데비안 계열처럼 /etc/hostname 이라는 파일을 사용하도록 변경되었습니다.&lt;/p&gt;

&lt;p&gt;/etc/sysconfig/network 파일은 보통 아래와 같이 설정을 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;NETWORKING=yes  
NETWORKING_IPV6=no  
HOSTNAME=centos70  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bash
CentOS 7 에서는 이렇게만 하면 hostname 이 변경이 안 되고 hostnamectl 이라는 명령어를 사용하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hostnamectl set-hostname centos7  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hostname 을 확인해 볼려면 hostname 명령어를 실행해 보면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;hostname  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 hostname 을 설정을 하면 /etc/hostname 이라는 파일이 생성이 되어 있는 것을 확인할 수 있습니다. 우분투 등의 데비안 계열의 리눅스와 동일하게 변경되었습니다.&lt;/p&gt;</content:encoded></item><item><title>Docker 설명서</title><description>&lt;ul&gt;
&lt;li&gt;출처 및 참고 : &lt;a href="http://pyrasis.com/Docker/Docker-HOWTO"&gt;pyrasis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="dockerinstall"&gt;Docker Install&lt;/h2&gt;

&lt;h5 id="yumdocker"&gt;yum으로 docker설치&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# yum install docker
Loaded plugins: fastestmirror, langpacks  
&amp;lt;del&amp;gt; blahblah &amp;lt;/del&amp;gt;  
Installed:  
  docker.x86_64 0:1.6.0-11.0.1.el7.centos
Dependency Installed:  
  audit-libs-python.x86_64 0:2.4.1-5.el7
  checkpolicy.x86_64 0:&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/docker-manual/</link><guid isPermaLink="false">09a88506-fe20-4e96-b8c6-5f97542ee7dd</guid><category>Docker</category><category>CentOS 7.0</category><dc:creator>4ox</dc:creator><pubDate>Sat, 06 Jun 2015 07:32:13 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;출처 및 참고 : &lt;a href="http://pyrasis.com/Docker/Docker-HOWTO"&gt;pyrasis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="dockerinstall"&gt;Docker Install&lt;/h2&gt;

&lt;h5 id="yumdocker"&gt;yum으로 docker설치&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# yum install docker
Loaded plugins: fastestmirror, langpacks  
&amp;lt;del&amp;gt; blahblah &amp;lt;/del&amp;gt;  
Installed:  
  docker.x86_64 0:1.6.0-11.0.1.el7.centos
Dependency Installed:  
  audit-libs-python.x86_64 0:2.4.1-5.el7
  checkpolicy.x86_64 0:2.1.12-6.el7
  docker-selinux.x86_64 0:1.6.0-11.0.1.el7.centos
  libcgroup.x86_64 0:0.41-8.el7
  libsemanage-python.x86_64 0:2.1.10-16.el7
  policycoreutils-python.x86_64 0:2.2.5-15.el7
  python-IPy.noarch 0:0.75-6.el7
  setools-libs.x86_64 0:3.3.7-46.el7
Complete!  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;간편하게 도커 패키지 실행&lt;/p&gt;

&lt;h5 id=""&gt;설치 확인&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker --version
Docker version 1.6.0, build 8aae715/1.6.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1.6버전 빌드&lt;/strong&gt; 확인&lt;/p&gt;

&lt;h5 id=""&gt;도커 이미지 확인&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker images
FATA[0001] Get http:///var/run/docker.sock/v1.18/images/json: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;도커 이미지를 확인하려했으나 에러발생&lt;/p&gt;

&lt;h5 id=""&gt;도커 데몬 실행&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# systemctl start docker.service
[root@7cent ~]# chkconfig docker on
알림: 'systemctl enable docker.service'에 요청을 전송하고 있습니다.
ln -s '/usr/lib/systemd/system/docker.service' '/etc/systemd/system/multi-user.target.wants/docker.service'  
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;도커를 부팅시에 올라오게 설정하고 데몬을 실행, 그리고 현재 이미지가 아무것도 없음을 확인&lt;/p&gt;

&lt;h2 id="installubuntu"&gt;Install Ubuntu&lt;/h2&gt;

&lt;h5 id="ceontos7dockerubuntu"&gt;CeontOS7 위에 Docker로 Ubuntu 설치&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker pull ubuntu:latest
latest: Pulling from docker.io/ubuntu  
e118faab2e16: Pull complete  
7e2c5c55ef2c: Pull complete  
e04c66a223c4: Pull complete  
fa81ed084842: Already exists  
docker.io/ubuntu:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.  
Digest: sha256:738edd684282277c07f23277718e43562daf2ee210f7aca9a13fae65f0159ddd  
Status: Downloaded newer image for docker.io/ubuntu:latest  
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
docker.io/ubuntu    latest              fa81ed084842        3 days ago          188.3 MB  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker에서 Ubuntu 최신 버전을 받고 현재 받은 이미지 확인 latest(최신버전) 을 받았습니다.&lt;/p&gt;

&lt;h5 id="docker"&gt;Docker 실행&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i -t --name test ubuntu /bin/bash  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-i ( interactive), -t(Pseudo-tty) 옵션을 사용해서 Bash Shell에 입력 및 출력을 할 수 있습니다.
--name 옵션은 test란 이름의 container를 생성합니다.
도커를 실행합니다.&lt;/p&gt;

&lt;h5 id="dockercontainer"&gt;Docker Container 목록 확인&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         13 minutes ago      Exited (0) 12 minutes ago                       test  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker ps 하면 현재 실행중인 Container만 보입니다. -a 옵션을 통해 모든 도커 컨테이너를 확인합니다. &lt;br&gt;
현재 test도커가 있음을 확인할 수 있습니다.&lt;/p&gt;

&lt;h5 id="testubuntucontainer"&gt;test(Ubuntu) Container 실행 및 접속&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker start test
test  
[root@7cent ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         15 minutes ago      Up 2 seconds                            test  
[root@7cent ~]# docker attach test
root@48faba53180c:/# ls  
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  
root@48faba53180c:/#  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test Container 를 실행하고 ps 명령어로 올라와있는지 확인합니다. &lt;br&gt;
이후 attach 명령어로 해당 Container 쉘에 접근합니다.
보통 &lt;em&gt;* Ctrl+D *&lt;/em&gt; 혹은 &lt;em&gt;* exit *&lt;/em&gt; 로 쉘을 종료하게 되는데 이러면 Docker Container가 종료됩니다.
&lt;em&gt;* Ctrl+P *&lt;/em&gt; 를 누른후 &lt;em&gt;* Ctrl+Q *&lt;/em&gt; 를 연속으로 누르면 Container가 살아있는 채로 HostOS로 빠져 나올 수 있습니다.&lt;/p&gt;

&lt;h5 id="dockercontainer"&gt;Docker Container 확인, 종료, 삭제&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         30 minutes ago      Up 5 minutes                            test  
[root@7cent ~]# docker stop test
test  
[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         30 minutes ago      Exited (0) 7 seconds ago                       test  
[root@7cent ~]# docker rm test
test  
[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;나와서 확인해보면 test Container가 실행중임을 확인 할 수 있습니다.
해당 Container를 멈추면 Status가 Exited상태로 변함을 알 수 있습니다.
docker rm test 명령어를 통해 Container를 삭제 하였습니다. &lt;br&gt;
docker ps -a 명령어를 통해 Container가 완전 삭제 되었음을 확인 할 수 있습니다.&lt;/p&gt;

&lt;h5 id="dockerimage"&gt;Docker Image 삭제&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
docker.io/ubuntu    latest              fa81ed084842        3 days ago          188.3 MB  
[root@7cent ~]# docker rmi ubuntu:latest
Untagged: ubuntu:latest  
Deleted: fa81ed084842076d1b39b56d084d99ec0011cd4a5ade1056be359486a8b213e4  
Deleted: e04c66a223c45a6247237510c40117cef92acb0a4355f1ba90580ef6274b490d  
Deleted: 7e2c5c55ef2cd7675dcc9e9cc012dc2f759ceaf0f36c950b672af6df87af5070  
Deleted: e118faab2e16f9d858fcec0d86c9148e9b0fa021697239745f3253f367941dcc  
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker images 를 확인하면 pull받았던 ubuntu 이미지가 존재함을 확인 할 수있는데 &lt;br&gt;
docker rmi ubuntu:latest 명령어를 통해 해당 이미지를 삭제 할 수 있습니다. &lt;br&gt;
다시한번 확인해보면 해당 이미지가 삭제 되었음을 확인 할 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title>About</title><description>&lt;p&gt;웹개발자입니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.koreaapps.net/index.do"&gt;KWAC(현재:K-Apps)&lt;/a&gt; 어플리케이션 32종 개발  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://somcloud.com/about/somtodo"&gt;솜투두&lt;/a&gt; Todo 부분 개발&lt;/li&gt;
&lt;/ol&gt;</description><link>http://localhost:2368/about/</link><guid isPermaLink="false">45c593d8-aa03-4b02-8290-cee7e332b1f7</guid><category>Getting Started</category><dc:creator>4ox</dc:creator><pubDate>Sat, 06 Jun 2015 06:59:25 GMT</pubDate><media:content url="http://localhost:2368/content/images/2015/06/2015-06-04-08-29-05.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2015/06/2015-06-04-08-29-05.jpg" alt="About"&gt;&lt;p&gt;웹개발자입니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.koreaapps.net/index.do"&gt;KWAC(현재:K-Apps)&lt;/a&gt; 어플리케이션 32종 개발  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://somcloud.com/about/somtodo"&gt;솜투두&lt;/a&gt; Todo 부분 개발&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>