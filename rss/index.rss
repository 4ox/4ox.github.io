<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>4ox's development log</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Sat, 06 Jun 2015 13:14:54 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Docker Manual</title><description>&lt;h1 id="docker"&gt;Docker 설명서&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;출처 및 참고 : &lt;a href="http://pyrasis.com/Docker/Docker-HOWTO"&gt;pyrasis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="dockerinstall"&gt;Docker Install&lt;/h2&gt;

&lt;h5 id="yumdocker"&gt;yum으로 docker설치&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# yum install docker
Loaded plugins: fastestmirror, langpacks &lt;br&gt;
&amp;lt;del&amp;gt; blahblah &amp;lt;/del&amp;gt; &lt;br&gt;
Installed: &lt;br&gt;
  docker.x86_64 0:1.6.0-11.0.1.el7.centos
Dependency Installed: &lt;br&gt;
  audit-libs-python.x86_64 0:2.4.1-5.el7
  checkpolicy.x86_&lt;/code&gt;&lt;/p&gt;</description><link>http://localhost:2368/docker-manual/</link><guid isPermaLink="false">09a88506-fe20-4e96-b8c6-5f97542ee7dd</guid><category>Getting Started</category><category>Docker</category><dc:creator>4ox</dc:creator><pubDate>Sat, 06 Jun 2015 07:32:13 GMT</pubDate><content:encoded>&lt;h1 id="docker"&gt;Docker 설명서&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;출처 및 참고 : &lt;a href="http://pyrasis.com/Docker/Docker-HOWTO"&gt;pyrasis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="dockerinstall"&gt;Docker Install&lt;/h2&gt;

&lt;h5 id="yumdocker"&gt;yum으로 docker설치&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# yum install docker
Loaded plugins: fastestmirror, langpacks &lt;br&gt;
&amp;lt;del&amp;gt; blahblah &amp;lt;/del&amp;gt; &lt;br&gt;
Installed: &lt;br&gt;
  docker.x86_64 0:1.6.0-11.0.1.el7.centos
Dependency Installed: &lt;br&gt;
  audit-libs-python.x86_64 0:2.4.1-5.el7
  checkpolicy.x86_64 0:2.1.12-6.el7
  docker-selinux.x86_64 0:1.6.0-11.0.1.el7.centos
  libcgroup.x86_64 0:0.41-8.el7
  libsemanage-python.x86_64 0:2.1.10-16.el7
  policycoreutils-python.x86_64 0:2.2.5-15.el7
  python-IPy.noarch 0:0.75-6.el7
  setools-libs.x86_64 0:3.3.7-46.el7
Complete! &lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;간편하게 도커 패키지 실행&lt;/p&gt;

&lt;h5 id=""&gt;설치 확인&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# docker --version
Docker version 1.6.0, build 8aae715/1.6.0 &lt;br&gt;
&lt;/code&gt;
&lt;strong&gt;1.6버전 빌드&lt;/strong&gt; 확인&lt;/p&gt;

&lt;h5 id=""&gt;도커 이미지 확인&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# docker images
FATA[0001] Get http:///var/run/docker.sock/v1.18/images/json: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? &lt;br&gt;
&lt;/code&gt;
도커 이미지를 확인하려했으나 에러발생&lt;/p&gt;

&lt;h5 id=""&gt;도커 데몬 실행&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# systemctl start docker.service
[root@7cent ~]# chkconfig docker on
알림: 'systemctl enable docker.service'에 요청을 전송하고 있습니다.
ln -s '/usr/lib/systemd/system/docker.service' '/etc/systemd/system/multi-user.target.wants/docker.service' &lt;br&gt;
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE &lt;br&gt;
&lt;/code&gt;
도커를 부팅시에 올라오게 설정하고 데몬을 실행, 그리고 현재 이미지가 아무것도 없음을 확인&lt;/p&gt;

&lt;h2 id="installubuntu"&gt;Install Ubuntu&lt;/h2&gt;

&lt;h5 id="ceontos7dockerubuntu"&gt;CeontOS7 위에 Docker로 Ubuntu 설치&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
[root@7cent ~]# docker pull ubuntu:latest
latest: Pulling from docker.io/ubuntu &lt;br&gt;
e118faab2e16: Pull complete &lt;br&gt;
7e2c5c55ef2c: Pull complete &lt;br&gt;
e04c66a223c4: Pull complete &lt;br&gt;
fa81ed084842: Already exists &lt;br&gt;
docker.io/ubuntu:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security. &lt;br&gt;
Digest: sha256:738edd684282277c07f23277718e43562daf2ee210f7aca9a13fae65f0159ddd &lt;br&gt;
Status: Downloaded newer image for docker.io/ubuntu:latest &lt;br&gt;
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE &lt;br&gt;
docker.io/ubuntu    latest              fa81ed084842        3 days ago          188.3 MB &lt;br&gt;
&lt;/code&gt;
Docker에서 Ubuntu 최신 버전을 받고 현재 받은 이미지 확인 latest(최신버전) 을 받았습니다.&lt;/p&gt;

&lt;h5 id="docker"&gt;Docker 실행&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;
docker run -i -t --name test ubuntu /bin/bash &lt;br&gt;
&lt;/code&gt;
-i ( interactive), -t(Pseudo-tty) 옵션을 사용해서 Bash Shell에 입력 및 출력을 할 수 있습니다.
--name 옵션은 test란 이름의 container를 생성합니다.
도커를 실행합니다.&lt;/p&gt;

&lt;h5 id="dockercontainer"&gt;Docker Container 목록 확인&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         13 minutes ago      Exited (0) 12 minutes ago                       test  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker ps 하면 현재 실행중인 Container만 보입니다. -a 옵션을 통해 모든 도커 컨테이너를 확인합니다. &lt;br&gt;
현재 test도커가 있음을 확인할 수 있습니다.&lt;/p&gt;

&lt;h5 id="testubuntucontainer"&gt;test(Ubuntu) Container 실행 및 접속&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;[root@7cent ~]# docker start test
test  
[root@7cent ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         15 minutes ago      Up 2 seconds                            test  
[root@7cent ~]# docker attach test
root@48faba53180c:/# ls  
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  
root@48faba53180c:/#  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test Container 를 실행하고 ps 명령어로 올라와있는지 확인합니다. &lt;br&gt;
이후 attach 명령어로 해당 Container 쉘에 접근합니다.
보통 &lt;em&gt;* Ctrl+D *&lt;/em&gt; 혹은 &lt;em&gt;* exit *&lt;/em&gt; 로 쉘을 종료하게 되는데 이러면 Docker Container가 종료됩니다.
&lt;em&gt;* Ctrl+P *&lt;/em&gt; 를 누른후 &lt;em&gt;* Ctrl+Q *&lt;/em&gt; 를 연속으로 누르면 Container가 살아있는 채로 HostOS로 빠져 나올 수 있습니다.&lt;/p&gt;

&lt;h5 id="dockercontainer"&gt;Docker Container 확인, 종료, 삭제&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         30 minutes ago      Up 5 minutes                            test  
[root@7cent ~]# docker stop test
test  
[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES  
48faba53180c        ubuntu:latest       "/bin/bash"         30 minutes ago      Exited (0) 7 seconds ago                       test  
[root@7cent ~]# docker rm test
test  
[root@7cent ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;나와서 확인해보면 test Container가 실행중임을 확인 할 수 있습니다.
해당 Container를 멈추면 Status가 Exited상태로 변함을 알 수 있습니다.
docker rm test 명령어를 통해 Container를 삭제 하였습니다. &lt;br&gt;
docker ps -a 명령어를 통해 Container가 완전 삭제 되었음을 확인 할 수 있습니다.&lt;/p&gt;

&lt;h5 id="dockerimage"&gt;Docker Image 삭제&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
docker.io/ubuntu    latest              fa81ed084842        3 days ago          188.3 MB  
[root@7cent ~]# docker rmi ubuntu:latest
Untagged: ubuntu:latest  
Deleted: fa81ed084842076d1b39b56d084d99ec0011cd4a5ade1056be359486a8b213e4  
Deleted: e04c66a223c45a6247237510c40117cef92acb0a4355f1ba90580ef6274b490d  
Deleted: 7e2c5c55ef2cd7675dcc9e9cc012dc2f759ceaf0f36c950b672af6df87af5070  
Deleted: e118faab2e16f9d858fcec0d86c9148e9b0fa021697239745f3253f367941dcc  
[root@7cent ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker images 를 확인하면 pull받았던 ubuntu 이미지가 존재함을 확인 할 수있는데 &lt;br&gt;
docker rmi ubuntu:latest 명령어를 통해 해당 이미지를 삭제 할 수 있습니다. &lt;br&gt;
다시한번 확인해보면 해당 이미지가 삭제 되었음을 확인 할 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title>Welcome to Ghost</title><description>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list&lt;/p&gt;</description><link>http://localhost:2368/about/</link><guid isPermaLink="false">45c593d8-aa03-4b02-8290-cee7e332b1f7</guid><category>Getting Started</category><dc:creator>4ox</dc:creator><pubDate>Sat, 06 Jun 2015 06:59:25 GMT</pubDate><media:content url="http://localhost:2368/content/images/2015/06/2015-06-04-08-29-05.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2015/06/2015-06-04-08-29-05.jpg" alt="Welcome to Ghost"&gt;&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item number one&lt;/li&gt;
&lt;li&gt;Item number two
&lt;ul&gt;&lt;li&gt;A nested item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember to buy some milk  &lt;/li&gt;
&lt;li&gt;Drink the milk  &lt;/li&gt;
&lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like &lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to &lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="whataboutimages"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ghost.org/images/ghost.png" alt="Welcome to Ghost"&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghost - Just a blogging platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="workingwithcode"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We've got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="readyforabreak"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="advancedusage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!"&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;</content:encoded></item></channel></rss>